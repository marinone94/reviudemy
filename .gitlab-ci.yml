stages:
  - init # docker registry
  - local_test
  - build_dev # build docker images for dev environment
  - build_staging # build docker images for staging environment
  - pre_dev # ingress
  - deploy_dev # service and deployment dev environment
  - test_dev # here you will add some automatic tests
  - pre_staging # ingress staging
  - deploy_staging # service and deployment staging environment
  - test_staging
  - pre_prod
  - deploy_prod
  - post_prod

image: alpine

variables:
  DOMAIN: $KUBE_INGRESS_BASE_DOMAIN
  SET_REGISTRY: "1"
  DEPLOY_INGRESS: "1"
  DEPLOY_SERVER: "1"
  DEPLOY_MONGO: "1"
  SERVER_DEV_REPLICAS: "1"
  SERVER_PROD_REPLICAS: "2"
  MONGO_DEV_REPLICAS: "2"
  MONGO_PROD_REPLICAS: "3"

.set_docker_registry_anchor: &set_docker_registry_anchor
  stage: init
  image:
    name: lachlanevenson/k8s-kubectl:v1.18.0
    entrypoint: ["/bin/sh", "-c"]
  environment:
    name: dev
    url: $DOMAIN
  script:
    - sed -i "s+KUBE_NAMESPACE+$KUBE_NAMESPACE+g" ./manifests/docker-registry-script.txt
    - kubectl create -n $KUBE_NAMESPACE secret docker-registry registry-gitlab-key --docker-server=$CI_REGISTRY --docker-username=$DOCKER_REGISTRY_U --docker-password=$DOCKER_REGISTRY_P
    - . ./manifests/docker-registry-script.txt
  allow_failure: true
  rules:
    - if: $SET_REGISTRY =~ '1'
      when: always
    - if: $SET_REGISTRY !~ '1'
      when: never

set_docker_registry_dev:
  <<: *set_docker_registry_anchor

set_docker_registry_staging:
  <<: *set_docker_registry_anchor
  environment:
    name: staging
    url: $DOMAIN

set_docker_registry_prod:
  <<: *set_docker_registry_anchor
  environment:
    name: prod
    url: $DOMAIN

.local_test_anchor: &local_test_anchor
  stage:
    local_test
  image: 
    name: python:3.7
  environment:
    name: dev
  script:
    - cd server/
    - sed -i "s+true+false+" ./cfg/init_cfg.json
    - pip install -r requirements.txt
    - python server.py &
    - sleep 3
    - python test.py
    
local_test_dev:
  <<: *local_test_anchor
  rules:
    - if: $CI_COMMIT_BRANCH =~ 'master'
      when: never
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: always

local_test_staging:
  <<: *local_test_anchor
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $CI_COMMIT_BRANCH =~ 'master'
      when: always

.build_server_anchor: &build_server_anchor
  stage: build_dev
  image: docker:19.03.8
  services:
    - docker:dind
  tags:
    - docker
  variables:
    NUM_REPLICAS: $MONGO_DEV_REPLICAS
  before_script:
    - docker login -u "$DOCKER_REGISTRY_U" -p "$DOCKER_REGISTRY_P" $CI_REGISTRY
  script:
    - mkdir ./server/tmp_manifests
    - mv ./manifests/deploy-mongo.yaml ./server/tmp_manifests/deploy-mongo.yaml
    - sed -i "s+NUM_REPLICAS+$NUM_REPLICAS+g" ./server/tmp_manifests/deploy-mongo.yaml
    - docker pull $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:latest
    - docker build --build-arg K8S_SECRET_NEWSAPI_KEY --cache-from $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server -t $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA ./server
    - docker push $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:latest
    - docker push $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:latest

build_server_dev:
  <<: *build_server_anchor
  rules:
    - if: $DEPLOY_SERVER !~ '1'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: always

build_server_staging:
  <<: *build_server_anchor
  stage:
    build_staging
  rules:
    - if: $DEPLOY_SERVER !~ '1'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: always

.deploy_ingress_anchor: &deploy_ingress_anchor
  stage: 
    pre_dev
  image:
    name: lachlanevenson/k8s-kubectl:v1.18.0
    entrypoint: ["/bin/sh", "-c"]
  variables:
    ENV: dev
  environment:
    name: $ENV
    url: $DOMAIN
  script:
    - cd manifests/
    - sed -i "s+EMAIL_ADDRESS+$EMAIL_ADDRESS+g" ./cert-issuer.yaml
    - sed -i "s+ENV+$ENV+g" ./cert-issuer.yaml
    - sed -i "s+DOMAIN+$DOMAIN+g" ./certificate.yaml
    - sed -i "s+ENV+$ENV+g" ./certificate.yaml
    - kubectl apply -f ./certificate.yaml
    - kubectl apply -f ./cert-issuer.yaml
    - sed -i "s+KUBE_NAMESPACE+${KUBE_NAMESPACE}+g" ./ingress-server.yaml
    - sed -i "s+DOMAIN+${DOMAIN}+g" ./ingress-server.yaml
    - sed -i "s+PREFIX+/${CI_PROJECT_NAME}/$ENV+g" ./ingress-server.yaml
    - sed -i "s+ENV+$ENV+g" ./ingress-server.yaml
    - kubectl apply -f ingress-server.yaml

deploy_ingress_dev:
  <<: *deploy_ingress_anchor
  rules:
    - if: $DEPLOY_INGRESS !~ '1'
      when: never
    - if: $DEPLOY_INGRESS =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: never
    - if: $DEPLOY_INGRESS =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: always

deploy_ingress_staging:
  <<: *deploy_ingress_anchor
  stage:
    pre_staging
  variables:
    ENV: staging
  rules:
    - if: $DEPLOY_INGRESS !~ '1'
      when: never
    - if: $DEPLOY_INGRESS =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $DEPLOY_INGRESS =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: always

deploy_ingress_prod:
  <<: *deploy_ingress_anchor
  stage:
    pre_prod
  variables:
    ENV: prod
  before_script:
    - sed -i "s+PREFIX+/$CI_PROJECT_NAME+g" ./manifests/ingress-server.yaml
  rules:
    - if: $DEPLOY_INGRESS !~ '1'
      when: never
    - if: $DEPLOY_INGRESS =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $DEPLOY_INGRESS =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: manual

.deploy_server_anchor: &deploy_server_anchor
  stage: 
    deploy_dev
  image:
    name: lachlanevenson/k8s-kubectl:v1.18.0
    entrypoint: ["/bin/sh", "-c"]
  variables:
    ENV: dev
    NUM_REPLICAS: $SERVER_DEV_REPLICAS
  environment:
    name: $ENV
    url: $DOMAIN
  script:
    - cd manifests/ KUBE_NAMESPACE
    - sed -i "s+KUBE_NAMESPACE+$KUBE_NAMESPACE+g" ./svc-server.yaml
    - sed -i "s+CI_REGISTRY+$CI_REGISTRY+g" ./deploy-server.yaml
    - sed -i "s+DOCKER_REGISTRY_U+$DOCKER_REGISTRY_U+g" ./deploy-server.yaml
    - sed -i "s+NUM_REPLICAS+$NUM_REPLICAS+g" ./deploy-server.yaml
    - sed -i "s+CI_PROJECT_NAME+$CI_PROJECT_NAME+g" ./deploy-server.yaml
    - sed -i "s+CI_COMMIT_SHORT_SHA+$CI_COMMIT_SHORT_SHA+g" ./deploy-server.yaml
    - kubectl apply -f svc-server.yaml
    - kubectl apply -f deploy-server.yaml
    - kubectl get all

deploy_server_dev:
  <<: *deploy_server_anchor
  rules:
    - if: $DEPLOY_SERVER !~ '1'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: always

deploy_server_staging:
  <<: *deploy_server_anchor
  stage:
    deploy_staging
  variables:
    ENV: staging
    NUM_REPLICAS: $SERVER_PROD_REPLICAS
  rules:
    - if: $DEPLOY_SERVER !~ '1'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: always

deploy_server_prod:
  <<: *deploy_server_anchor
  stage:
    deploy_prod
  variables:
    ENV: prod
    NUM_REPLICAS: $SERVER_PROD_REPLICAS
  rules:
    - if: $DEPLOY_SERVER !~ '1'
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $DEPLOY_SERVER =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: manual

.deploy_mongo_anchor: &deploy_mongo_anchor
  stage:
    deploy_dev
  image:
    name: lachlanevenson/k8s-kubectl:v1.18.0
    entrypoint: ["/bin/sh", "-c"]
  variables:
    ENV: dev
    NUM_REPLICAS: $MONGO_DEV_REPLICAS
  environment:
    name: $ENV
    url: $DOMAIN
  script:
    - cd manifests/
    - sed -i "s+KUBE_NAMESPACE+$KUBE_NAMESPACE+g" ./svc-mongo.yaml
    - sed -i "s+KUBE_NAMESPACE+$KUBE_NAMESPACE+g" ./deploy-mongo.yaml
    - sed -i "s+NUM_REPLICAS+$NUM_REPLICAS+g" ./deploy-mongo.yaml
    - sed -i "s+ENV+$ENV+g" ./deploy-mongo.yaml
    - kubectl apply -f storage-mongo.yaml
    - sleep 10
    - kubectl apply -f svc-mongo.yaml
    - kubectl apply -f deploy-mongo.yaml
    - kubectl get all

deploy_mongo_dev:
  <<: *deploy_mongo_anchor
  environment:
    name: $ENV
    url: $DOMAIN
    on_stop: stop_dev
  rules:
    - if: $DEPLOY_MONGO !~ '1'
      when: never
    - if: $DEPLOY_MONGO =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: never
    - if: $DEPLOY_MONGO =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: always

deploy_mongo_staging:
  <<: *deploy_mongo_anchor
  stage:
    deploy_staging
  variables:
    ENV: staging
    NUM_REPLICAS: $MONGO_PROD_REPLICAS
  rules:
    - if: $DEPLOY_MONGO !~ '1'
      when: never
    - if: $DEPLOY_MONGO =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $DEPLOY_MONGO =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: always

deploy_mongo_prod:
  <<: *deploy_mongo_anchor
  stage:
    deploy_prod
  variables:
    ENV: prod
    NUM_REPLICAS: $MONGO_PROD_REPLICAS
  rules:
    - if: $DEPLOY_MONGO !~ '1'
      when: never
    - if: $DEPLOY_MONGO =~ '1' && $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $DEPLOY_MONGO =~ '1' && $CI_COMMIT_BRANCH =~ 'master'
      when: manual

.stop_anchor: &stop_anchor
  stage:
    test_dev
  image:
    name: lachlanevenson/k8s-kubectl:v1.18.0
    entrypoint: ["/bin/sh", "-c"]
  variables:
    GIT_STRATEGY: none
    ENV: dev
  environment:
    name: $ENV
    action: stop
  script:
    - kubectl delete -n $KUBE_NAMESPACE deployments --all
    - kubectl delete -n $KUBE_NAMESPACE svc --all

test_staging_auto:
  stage:
    test_staging
  script:
    - echo "Automatic testing staging env"
  rules:
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: always
      
test_staging_manual:
  stage:
    test_staging
  script:
    - echo "Manual testing staging env"
  rules:
    - if: ! $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: manual

stop_dev:
  <<: *stop_anchor
  rules:
    - if: $CI_COMMIT_BRANCH =~ 'master'
      when: never
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: manual

stop_staging:
  <<: *stop_anchor
  stage:
    post_prod
  environment:
    name: staging
    action: stop
  allow_failure: true 
  rules:
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: manual

update_stable_image:
  stage:
    post_prod
  image: docker:19.03.8
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - docker login -u "$DOCKER_REGISTRY_U" -p "$DOCKER_REGISTRY_P" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:stable
    - docker push $CI_REGISTRY/$DOCKER_REGISTRY_U/$CI_PROJECT_NAME/server:stable
  rules:
    - if: $CI_COMMIT_BRANCH !~ 'master'
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_BRANCH =~ 'master'
      when: manual